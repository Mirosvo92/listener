Index: bnb-controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const { events } = require('./events');\nconst ethers = require('ethers');\nconst { getDefaultProvider, getWebsocketProvider } = require('./services/provider-service');\nconst { io } = require('./socket');\nconst { bnbAddress, wbnbAddress } = require('./constants');\n\nfunction isNewToken(address) {\n  return address !== bnbAddress && address !== wbnbAddress;\n}\n\nasync function checkBalance(address) {\n  const walletAddress = address; // Replace with your Ethereum wallet address\n\n  // Connect to an Ethereum node using Infura (you need an API key from Infura)\n  const providerBsc = new ethers.providers.getDefaultProvider(\n    process.env.ankrBSChttp,\n    'mainnet'\n  );\n  const providerETH = new ethers.providers.getDefaultProvider(\n    process.env.ankrETHhttp,\n    'mainnet'\n  );\n\n  // Get the balance of the wallet\n  const balanceBsc = await providerBsc.getBalance(walletAddress);\n  const balanceETH = await providerETH.getBalance(walletAddress);\n\n  return {\n    BSC: ethers.utils.formatEther(balanceBsc),\n    ETH: ethers.utils.formatEther(balanceETH),\n  };\n}\n\nasync function getContractInfoByAbi(address, ABI) {\n  const provider = new ethers.providers.getDefaultProvider(\n    process.env.ankrBSChttp,\n    'mainnet'\n  );\n  const contract = new ethers.Contract(address, ABI, provider);\n\n  return contract;\n}\nasync function fnListener(contractAddress, param1, param2, event) {\n  console.log('new transaction', event);\n  console.log('param1', param1);\n  console.log('param2', param2);\n  const symbol = 'BNB';\n  const balance = await checkBalance(param2);\n  io.to(contractAddress).emit('new-contract-trans', { balance, contractAddress, symbol, wallet: param2 });\n}\n\nclass BNBController {\n  pairCreatedCount = 0;\n  factory = null;\n  listeningContracts = {};\n\n  createContract(contractAddress) {\n    const provider = new ethers.providers.WebSocketProvider(\n      process.env.ankrBSCwebSocket,\n      'mainnet'\n    );\n    const contractABI = ['event Transfer(address indexed from, address indexed to, uint256 value)']; // Replace with your contract's ABI\n    const contract = new ethers.Contract(contractAddress, contractABI, provider);\n    return contract;\n  }\n\n  listenNewPairs = async (socket) => {\n    const addresses = {\n      factory: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n    };\n\n    const mnemonic = process.env.mnemonic;\n    const provider = getWebsocketProvider('bsc');\n    const wallet = ethers.Wallet.fromMnemonic(mnemonic);\n    const account = wallet.connect(provider);\n\n    this.factory = new ethers.Contract(\n      addresses.factory,\n      ['event PairCreated(address indexed token0, address indexed token1, address pair, uint)'],\n      account\n    );\n    console.log('start listen new pairs');\n    this.factory.on('PairCreated', (token0, token1, pairAddress) =>\n      this.pairCreatedListener(token0, token1, pairAddress, socket)\n    );\n  };\n\n  pairCreatedListener = async (token0, token1, pairAddress, socket) => {\n    console.log(`\n    New pair detected ${new Date()}\n    =================\n    token0: ${token0}\n    token1: ${token1}\n    pairAddress: ${pairAddress}\n  `);\n\n    const tokenAddress = isNewToken(token0) ? token0 : token1;\n    const contractInfo = await getContractInfoByAbi(tokenAddress, ['function symbol() view returns (string)']);\n    const symbol = await contractInfo.symbol();\n\n    io.emit(events.NewPairCreated, { tokenAddress, symbol });\n\n    if (this.pairCreatedCount === 20) {\n      this.factory.off('PairCreated', this.pairCreatedListener);\n    }\n  };\n\n  listenTransactionsOnContract = async (contractAddress, socket) => {\n    console.log('start listen transactions on contract,', contractAddress);\n    //We will use contract address as room id.\n    const room = io.sockets.adapter.rooms.get(contractAddress);\n\n    //If room already exists, it means that we already listen transactions by this contract\n    if (!room) {\n      console.log('This contract wasnt listen yet, create room and start listen contract');\n      this.listeningContracts[contractAddress] = { contract: null, eventListener: null };\n      this.listeningContracts[contractAddress]['contract'] = this.createContract(contractAddress);\n      this.listeningContracts[contractAddress]['eventListener'] = function (param1, param2, event) {\n        return fnListener(contractAddress, param1, param2, event);\n      };\n\n      this.listeningContracts[contractAddress].contract.on(\n        'Transfer',\n        this.listeningContracts[contractAddress].eventListener\n      );\n    } else {\n      console.log(this.listeningContracts[contractAddress]);\n      console.log('This croom already exist, just connect socket to the room');\n    }\n\n    socket.join(contractAddress);\n  };\n\n  stopListenTransactionsOnContract = async (contractAddress, socket) => {\n    console.log('stop listen transactions on contract', contractAddress);\n    const contract = this.listeningContracts[contractAddress]?.contract;\n    const eventListener = this.listeningContracts[contractAddress]?.eventListener;\n    // Delete listener and leave the room;\n    contract.off('Transfer', eventListener);\n    socket.leave(contractAddress);\n  };\n}\n\nconst bnbController = new BNBController();\n\nmodule.exports = { bnbController };\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bnb-controller.js	(revision 190735b5c6c5238ec701be69887d16164955b621)
+++ bnb-controller.js	(date 1704885755060)
@@ -96,7 +96,13 @@
 
     const tokenAddress = isNewToken(token0) ? token0 : token1;
     const contractInfo = await getContractInfoByAbi(tokenAddress, ['function symbol() view returns (string)']);
-    const symbol = await contractInfo.symbol();
+    let symbol = 'unknown';
+
+    try {
+      symbol = await contractInfo.symbol();
+    } catch (error) {
+      console.log('can not get symbol');
+    }
 
     io.emit(events.NewPairCreated, { tokenAddress, symbol });
 
